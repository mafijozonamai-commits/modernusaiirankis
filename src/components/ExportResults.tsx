import React from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Share2, Download, FileText, Image, Link, Trophy } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface DebateResult {
  topic: string;
  studentPosition: 'pro' | 'con';
  finalScore: number;
  rounds: Array<{
    round: number;
    studentArgument: string;
    aiResponse: string;
    score: number;
    feedback: string[];
  }>;
  duration: number;
  strengths: string[];
  improvements: string[];
  badges?: string[];
  date: Date;
}

interface ExportResultsProps {
  results: DebateResult;
  onShare?: (platform: string) => void;
}

export const ExportResults: React.FC<ExportResultsProps> = ({ results, onShare }) => {
  const { toast } = useToast();

  const generatePDFContent = (): string => {
    const { topic, studentPosition, finalScore, rounds, duration, strengths, improvements, date } = results;
    
    return `
DIGITAL DEBATE COACH - SESSION REPORT
=====================================

Date: ${date.toLocaleDateString()}
Topic: ${topic}
Position: ${studentPosition.toUpperCase()}
Final Score: ${finalScore}/100
Duration: ${Math.floor(duration / 60)}:${(duration % 60).toString().padStart(2, '0')}

ROUND BREAKDOWN
===============
${rounds.map(round => `
Round ${round.round}:
Student Argument: "${round.studentArgument}"
Score: ${round.score}/100
AI Response: "${round.aiResponse}"
Feedback: ${round.feedback.join(', ')}
`).join('\n')}

PERFORMANCE ANALYSIS
====================

Strengths:
${strengths.map(strength => `‚Ä¢ ${strength}`).join('\n')}

Areas for Improvement:
${improvements.map(improvement => `‚Ä¢ ${improvement}`).join('\n')}

${results.badges && results.badges.length > 0 ? `
ACHIEVEMENTS
============
${results.badges.map(badge => `üèÜ ${badge}`).join('\n')}
` : ''}

Generated by Digital Debate Coach
Visit: https://debatecoach.ai
    `.trim();
  };

  const handleDownloadPDF = () => {
    const content = generatePDFContent();
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `debate-report-${results.date.toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report Downloaded",
      description: "Your debate report has been saved as a text file.",
    });
  };

  const handleShare = (platform: string) => {
    const shareText = `Just completed a debate on "${results.topic}" and scored ${results.finalScore}/100! üéØ Improving my argumentation skills with Digital Debate Coach. #DebateSkills #Learning`;
    const shareUrl = window.location.href;

    let url = '';
    switch (platform) {
      case 'twitter':
        url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;
        break;
      case 'facebook':
        url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`;
        break;
      case 'linkedin':
        url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&summary=${encodeURIComponent(shareText)}`;
        break;
      case 'copy':
        navigator.clipboard.writeText(`${shareText}\n\n${shareUrl}`);
        toast({
          title: "Link Copied",
          description: "Share text has been copied to your clipboard.",
        });
        return;
    }

    if (url) {
      window.open(url, '_blank', 'width=600,height=400');
      onShare?.(platform);
    }
  };

  const generateShareableImage = () => {
    // This would generate a canvas-based image with results
    // For now, just show a placeholder action
    toast({
      title: "Feature Coming Soon",
      description: "Shareable result images will be available in the next update!",
    });
  };

  const copyResultsLink = () => {
    const resultsData = btoa(JSON.stringify({
      topic: results.topic,
      score: results.finalScore,
      date: results.date.toISOString(),
    }));
    const shareableUrl = `${window.location.origin}?results=${resultsData}`;
    
    navigator.clipboard.writeText(shareableUrl);
    toast({
      title: "Results Link Copied",
      description: "Share this link to show your debate performance!",
    });
  };

  return (
    <Card className="p-6 space-y-6">
      <div className="text-center space-y-2">
        <div className="flex items-center justify-center gap-2">
          <Trophy className="h-6 w-6 text-yellow-600" />
          <h2 className="text-xl font-bold">Share Your Achievement!</h2>
        </div>
        <p className="text-muted-foreground">
          Show off your debate skills and inspire others to learn
        </p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-3 gap-4 text-center">
        <div className="space-y-1">
          <div className="text-2xl font-bold text-primary">{results.finalScore}</div>
          <div className="text-xs text-muted-foreground">Final Score</div>
        </div>
        <div className="space-y-1">
          <div className="text-2xl font-bold text-green-600">{results.rounds.length}</div>
          <div className="text-xs text-muted-foreground">Rounds</div>
        </div>
        <div className="space-y-1">
          <div className="text-2xl font-bold text-blue-600">
            {Math.floor(results.duration / 60)}m
          </div>
          <div className="text-xs text-muted-foreground">Duration</div>
        </div>
      </div>

      {/* Export Options */}
      <div className="space-y-4">
        <h3 className="font-semibold flex items-center gap-2">
          <Download className="h-4 w-4" />
          Export Options
        </h3>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <Button
            variant="outline"
            onClick={handleDownloadPDF}
            className="flex items-center gap-2 h-12"
          >
            <FileText className="h-4 w-4" />
            <div className="text-left">
              <div className="font-medium">Download Report</div>
              <div className="text-xs text-muted-foreground">Detailed analysis as text file</div>
            </div>
          </Button>
          
          <Button
            variant="outline"
            onClick={generateShareableImage}
            className="flex items-center gap-2 h-12"
          >
            <Image className="h-4 w-4" />
            <div className="text-left">
              <div className="font-medium">Generate Image</div>
              <div className="text-xs text-muted-foreground">Social media ready graphic</div>
            </div>
          </Button>
        </div>
      </div>

      {/* Share Options */}
      <div className="space-y-4">
        <h3 className="font-semibold flex items-center gap-2">
          <Share2 className="h-4 w-4" />
          Share Your Success
        </h3>
        
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleShare('twitter')}
            className="flex flex-col items-center gap-1 h-16"
          >
            <div className="text-lg">üê¶</div>
            <span className="text-xs">Twitter</span>
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleShare('facebook')}
            className="flex flex-col items-center gap-1 h-16"
          >
            <div className="text-lg">üìò</div>
            <span className="text-xs">Facebook</span>
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => handleShare('linkedin')}
            className="flex flex-col items-center gap-1 h-16"
          >
            <div className="text-lg">üíº</div>
            <span className="text-xs">LinkedIn</span>
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={copyResultsLink}
            className="flex flex-col items-center gap-1 h-16"
          >
            <Link className="h-4 w-4" />
            <span className="text-xs">Copy Link</span>
          </Button>
        </div>
      </div>

      {/* Copy Text Option */}
      <div className="pt-4 border-t">
        <Button
          variant="ghost"
          onClick={() => handleShare('copy')}
          className="w-full flex items-center gap-2"
        >
          <Share2 className="h-4 w-4" />
          Copy Share Text
        </Button>
      </div>

      {/* Badges Display */}
      {results.badges && results.badges.length > 0 && (
        <div className="pt-4 border-t">
          <h4 className="font-medium mb-2">Achievements Unlocked:</h4>
          <div className="flex flex-wrap gap-2">
            {results.badges.map((badge, index) => (
              <Badge key={index} variant="outline" className="bg-yellow-50 border-yellow-200">
                üèÜ {badge}
              </Badge>
            ))}
          </div>
        </div>
      )}
    </Card>
  );
};